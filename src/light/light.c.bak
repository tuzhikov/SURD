/*****************************************************************************
*
* © 2014 Cyber-SB. Written by Selyutin Alex.
*
*****************************************************************************/
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "../tnkernel/tn.h"
#include "../stellaris.h"
#include "../debug/debug.h"
#include "../version.h"
#include "light.h"
#include "../pref.h"
#include "../pins.h"
#include "../dk/dk.h"

#define LIGHT_REFRESH_INTERVAL    1000

// audio task tcb and stack

static TN_TCB task_light_tcb;
#pragma location = ".noinit"
#pragma data_alignment=8

_LIGHT_MACHINE light_machine;
unsigned char * text_light[8] = {"ALL_OFF" ,"GREEN", "GREEN_FLASH","RED","RED_YELLOW","YELLOW","YELLOW_FLASH","RESERVED"};

static unsigned int task_light_stk[TASK_LIGHT_STK_SZ];
static void task_light_func(void* param);


void light_init()
{
    dbg_printf("Initializing LIGHT...");

    MAP_SysCtlPWMClockSet(SYSCTL_PWMDIV_64);
    MAP_SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM);
    MAP_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOJ);
    MAP_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOG);
    MAP_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOH);
    MAP_GPIOPinConfigure(GPIO_PJ0_PWM0);
    MAP_GPIOPinConfigure(GPIO_PH7_PWM5);
    MAP_GPIOPinConfigure(GPIO_PG1_PWM1);

    MAP_GPIOPinTypePWM(GPIO_PORTJ_BASE, GPIO_PIN_0);
    MAP_GPIOPinTypePWM(GPIO_PORTH_BASE, GPIO_PIN_7);
    MAP_GPIOPinTypePWM(GPIO_PORTG_BASE, GPIO_PIN_1);

    MAP_PWMGenConfigure(PWM_BASE, PWM_GEN_0, PWM_GEN_MODE_DOWN | PWM_GEN_MODE_NO_SYNC | PWM_GEN_MODE_DBG_RUN);
    MAP_PWMGenConfigure(PWM_BASE, PWM_GEN_2, PWM_GEN_MODE_DOWN | PWM_GEN_MODE_NO_SYNC | PWM_GEN_MODE_DBG_RUN);

    PWMGenPeriodSet(PWM_BASE, PWM_GEN_0, 12500);
    PWMGenPeriodSet(PWM_BASE, PWM_GEN_2, 12500);

    SetPWM (pref_get_long(PREF_L_PWM_RGY));

    PWMOutputState(PWM_BASE, PWM_OUT_0_BIT | PWM_OUT_1_BIT | PWM_OUT_5_BIT, TRUE);
    PWMGenEnable(PWM_BASE, PWM_GEN_0);
    PWMGenEnable(PWM_BASE, PWM_GEN_2);


    
    light_machine.work = FALSE;
    
    Init_DK();
    
    flash_rd(FLASH_PROGRAM, 0, (unsigned char*)&PROJ, sizeof(PROJ));
    // Здесь нужна проверна на правильность считанной программы, но пока её нет - просто запустим машину  
    light_machine.work = TRUE;
   
    if (tn_task_create(&task_light_tcb, &task_light_func, TASK_LIGHT_PRI,
        &task_light_stk[TASK_LIGHT_STK_SZ - 1], TASK_LIGHT_STK_SZ, 0,
        TN_TASK_START_ON_CREATION) != TERR_NO_ERR)
    {
        dbg_puts("tn_task_create(&task_light_tcb) error");
        dbg_trace();
        tn_halt();
    }
    
    light_machine.work = FALSE;
    
    Init_DK();
    
    dbg_puts("[done]");
}

BOOL GetLightMachineWork(void)
{
    return light_machine.work;
}

void SetLightMachineWork(BOOL work)
{
    light_machine.work = work;
}

void SetPWM (unsigned long pwm_rgy)
{
    unsigned pwm;
    
    pwm = pwm_rgy & 0xFF;
    if (pwm == 0)
    {
        pwm = PWMGenPeriodGet(PWM_BASE, PWM_GEN_2)-1;
        PWMOutputInvert(PWM_BASE, PWM_OUT_5_BIT, true);      
    }else
    {
        pwm = (PWMGenPeriodGet(PWM_BASE, PWM_GEN_2)-1) * (pwm_rgy & 0xFF)/ 100;
        PWMOutputInvert(PWM_BASE, PWM_OUT_5_BIT, false); 
    }
    PWMPulseWidthSet(PWM_BASE, PWM_OUT_5, pwm);
    
    pwm = (pwm_rgy>>8) & 0xFF;
    if (pwm == 0)
    {
        pwm = PWMGenPeriodGet(PWM_BASE, PWM_GEN_0)-1;
        PWMOutputInvert(PWM_BASE, PWM_OUT_1_BIT, true);
    }else
    {
        pwm = (PWMGenPeriodGet(PWM_BASE, PWM_GEN_0)-1) * ((pwm_rgy>>8) & 0xFF)/ 100;
        PWMOutputInvert(PWM_BASE, PWM_OUT_1_BIT, false);        
    }
    PWMPulseWidthSet(PWM_BASE, PWM_OUT_1, pwm);
    
    pwm = (pwm_rgy>>16) & 0xFF;
    if (pwm == 0)
    {
        pwm =PWMGenPeriodGet(PWM_BASE, PWM_GEN_0)-1;
        PWMOutputInvert(PWM_BASE, PWM_OUT_0_BIT, true);        
    }else
    {
        pwm = (PWMGenPeriodGet(PWM_BASE, PWM_GEN_0)-1) * ((pwm_rgy>>16) & 0xFF)/ 100;      
        PWMOutputInvert(PWM_BASE, PWM_OUT_0_BIT, false);
    }
    PWMPulseWidthSet(PWM_BASE, PWM_OUT_0, pwm);
}

void SetLight (unsigned short light)
{
    light_machine.light = light;
   
    switch (light & DIRECT1)
    {
        case ALL_OFF:
        case RESERVED:
            pin_off(OPIN_OUT_R1);
            pin_off(OPIN_OUT_A1);
            pin_off(OPIN_OUT_G1);
        break;
        case GREEN:
        case GREEN_FLASH:
            pin_off(OPIN_OUT_R1);
            pin_off(OPIN_OUT_A1);
            pin_on(OPIN_OUT_G1);            
        break;
        case RED:
            pin_on(OPIN_OUT_R1);
            pin_off(OPIN_OUT_A1);
            pin_off(OPIN_OUT_G1);            
        break;
        case RED_YELLOW:
            pin_on(OPIN_OUT_R1);
            pin_on(OPIN_OUT_A1);
            pin_off(OPIN_OUT_G1);            
        break;
        case YELLOW:
        case YELLOW_FLASH:  
            pin_off(OPIN_OUT_R1);
            pin_on(OPIN_OUT_A1);
            pin_off(OPIN_OUT_G1);            
        break;
    }
    
    switch ((light & WALKER1)>>4)
    {
        case ALL_OFF:
            pin_off(OPIN_OUT_R3);
            pin_off(OPIN_OUT_G3);
        break;
        case GREEN:
        case GREEN_FLASH:
            pin_off(OPIN_OUT_R3);
            pin_on(OPIN_OUT_G3);
        break;
        case RED:
            pin_on(OPIN_OUT_R3);
            pin_off(OPIN_OUT_G3);
        break;        
    }
    
    switch ((light & ARROW1)>>6)
    {
        case ALL_OFF:
        case RED:
            pin_off(OPIN_OUT_G5);
        break;
        case GREEN:
        case GREEN_FLASH:
            pin_on(OPIN_OUT_G5);
        break;        
    }

    switch ((light & DIRECT2)>>8)
    {
        case ALL_OFF:
        case RESERVED:
            pin_off(OPIN_OUT_R2);
            pin_off(OPIN_OUT_A2);
            pin_off(OPIN_OUT_G2);
        break;
        case GREEN:
        case GREEN_FLASH:
            pin_off(OPIN_OUT_R2);
            pin_off(OPIN_OUT_A2);
            pin_on(OPIN_OUT_G2);            
        break;
        case RED:
            pin_on(OPIN_OUT_R2);
            pin_off(OPIN_OUT_A2);
            pin_off(OPIN_OUT_G2);            
        break;
        case RED_YELLOW:
            pin_on(OPIN_OUT_R2);
            pin_on(OPIN_OUT_A2);
            pin_off(OPIN_OUT_G2);            
        break;
        case YELLOW:
        case YELLOW_FLASH:  
            pin_off(OPIN_OUT_R2);
            pin_on(OPIN_OUT_A2);
            pin_off(OPIN_OUT_G2);            
        break;
    }
    
    switch ((light & WALKER2)>>12)
    {
        case ALL_OFF:
            pin_off(OPIN_OUT_R4);
            pin_off(OPIN_OUT_G4);
        break;
        case GREEN:
        case GREEN_FLASH:
            pin_off(OPIN_OUT_R4);
            pin_on(OPIN_OUT_G4);
        break;
        case RED:
            pin_on(OPIN_OUT_R4);
            pin_off(OPIN_OUT_G4);
        break;        
    }
    
    switch ((light & ARROW2)>>14)
    {
        case ALL_OFF:
        case RED:
            pin_off(OPIN_OUT_G6);
        break;
        case GREEN:
        case GREEN_FLASH:
            pin_on(OPIN_OUT_G6);
        break;        
    }
}

unsigned short GetLight (void)
{
    return light_machine.light;
}
////
void GetNaprText (char *buf)
{
    //
    snprintf(buf, 128, "D1: %s \nD2: %s\n",
             text_light[DK.control.napr[0]],
             text_light[DK.control.napr[1]]);
}
///

void GetLightText (char *buf)
{
    unsigned short light = light_machine.light;
    
    snprintf(buf, 128, "Direct1: %s, %s, %s \nDirect2: %s, %s, %s\n",
             text_light[light&DIRECT1], text_light[(light>>4)&WALKER1], text_light[(light>>6)&ARROW1],
             text_light[(light>>8)&DIRECT2], text_light[(light>>12)&WALKER2], text_light[(light>>14)&ARROW2]);
}

static void task_light_func(void* param)
{
    unsigned short test = 0;
    
    pin_on(OPIN_POWER);
    
    for (;;)
    {

        tn_task_sleep(LIGHT_REFRESH_INTERVAL);
   
        if (!light_machine.work)
            continue;
        
        DK_MAIN();
/*        
        test++;
        
        if (test%4 == 0)
        {
          SetLight(0);
          pin_off(OPIN_OUT_E1);
          pin_off(OPIN_OUT_E2);
        }
        else if(test%4 == 1)
        {
          pin_on(OPIN_OUT_G1);
          pin_on(OPIN_OUT_G2);
          pin_on(OPIN_OUT_G3);
          pin_on(OPIN_OUT_G4);
          pin_on(OPIN_OUT_G5);
          pin_on(OPIN_OUT_G6);
          
        }

        else if(test%4 == 2)

        {
          SetLight(0);          
          pin_on(OPIN_OUT_R1);
          pin_on(OPIN_OUT_R2);
          pin_on(OPIN_OUT_R3);
          pin_on(OPIN_OUT_R4);
          
        }
        else if(test%4 == 3)
        {
          SetLight(0);  

          pin_on(OPIN_OUT_A1);
          pin_on(OPIN_OUT_A2);          
          pin_on(OPIN_OUT_E1);
          pin_on(OPIN_OUT_E2);     
        }     
*/
/*
        pin_on(OPIN_DISO_0);
*/
    }
}

